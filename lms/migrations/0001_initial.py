# Generated by Django 5.2.1 on 2025-05-11 02:16

import core.async_utils
import django.db.models.deletion
import encrypted_model_fields.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CanvasCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.PositiveIntegerField(default=0, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('course_code', models.CharField(max_length=255)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=False)),
                ('syllabus_body', models.TextField(blank=True, null=True)),
                ('workflow_state', models.CharField(default='unpublished', max_length=50)),
                ('time_zone', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CanvasRubric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.CharField(max_length=255, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('points_possible', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CanvasAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.PositiveIntegerField(default=0, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('points_possible', models.FloatField(default=0.0)),
                ('due_at', models.DateTimeField(blank=True, null=True)),
                ('unlock_at', models.DateTimeField(blank=True, null=True)),
                ('lock_at', models.DateTimeField(blank=True, null=True)),
                ('position', models.IntegerField(default=0)),
                ('grading_type', models.CharField(choices=[('points', 'Points'), ('percent', 'Percentage'), ('letter_grade', 'Letter Grade'), ('gpa_scale', 'GPA Scale'), ('pass_fail', 'Pass/Fail'), ('not_graded', 'Not Graded')], default='points', max_length=20)),
                ('published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('submission_types', models.JSONField(blank=True, default=list)),
                ('has_submitted_submissions', models.BooleanField(default=False)),
                ('muted', models.BooleanField(default=False)),
                ('html_url', models.URLField(blank=True, null=True)),
                ('has_overrides', models.BooleanField(default=False)),
                ('needs_grading_count', models.IntegerField(default=0)),
                ('is_quiz_assignment', models.BooleanField(default=False)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='lms.canvascourse')),
            ],
            options={
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Canvas',
            fields=[
            ],
            options={
                'verbose_name': 'Canvas',
                'verbose_name_plural': 'Canvas',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('lms.canvascourse',),
        ),
        migrations.CreateModel(
            name='CanvasEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.PositiveIntegerField(default=0, unique=True)),
                ('user_id', models.PositiveIntegerField()),
                ('user_name', models.CharField(max_length=255)),
                ('sortable_name', models.CharField(blank=True, max_length=255, null=True)),
                ('short_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('role', models.CharField(choices=[('StudentEnrollment', 'Student'), ('TeacherEnrollment', 'Teacher'), ('TaEnrollment', 'Teaching Assistant'), ('DesignerEnrollment', 'Designer'), ('ObserverEnrollment', 'Observer'), ('StudentViewEnrollment', 'Test Student')], default='StudentEnrollment', max_length=50)),
                ('enrollment_state', models.CharField(choices=[('active', 'Active'), ('invited', 'Invited'), ('rejected', 'Rejected'), ('completed', 'Completed'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('last_activity_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('grades', models.JSONField(blank=True, default=dict)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='lms.canvascourse')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='canvas_enrollments', to='core.student')),
            ],
            options={
                'ordering': ['sortable_name'],
                'unique_together': {('course', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='CanvasGroupCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.PositiveIntegerField(unique=True)),
                ('name', models.CharField(max_length=255)),
                ('self_signup', models.CharField(blank=True, max_length=50, null=True)),
                ('auto_leader', models.CharField(blank=True, max_length=50, null=True)),
                ('group_limit', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('last_synced_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_categories', to='lms.canvascourse')),
            ],
            options={
                'verbose_name_plural': 'Canvas Group Categories',
                'ordering': ['name'],
            },
            bases=(models.Model, core.async_utils.AsyncModelMixin),
        ),
        migrations.CreateModel(
            name='CanvasGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.PositiveIntegerField(unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('last_synced_at', models.DateTimeField(auto_now=True)),
                ('core_team', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='canvas_group_link', to='core.team')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='lms.canvasgroupcategory')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model, core.async_utils.AsyncModelMixin),
        ),
        migrations.CreateModel(
            name='CanvasIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_url', models.URLField(default='https://canvas.instructure.com')),
                ('api_key', encrypted_model_fields.fields.EncryptedCharField()),
                ('refresh_token', encrypted_model_fields.fields.EncryptedCharField(blank=True, null=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='canvas_integrations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='canvascourse',
            name='integration',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='lms.canvasintegration'),
        ),
        migrations.CreateModel(
            name='CanvasRubricCriterion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('long_description', models.TextField(blank=True, null=True)),
                ('points', models.FloatField(default=0.0)),
                ('criterion_use_range', models.BooleanField(default=False)),
                ('rubric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='lms.canvasrubric')),
            ],
            options={
                'unique_together': {('rubric', 'canvas_id')},
            },
        ),
        migrations.CreateModel(
            name='CanvasGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='lms.canvasgroup')),
                ('student', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='canvas_group_memberships', to='core.student')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('group', 'user_id')},
            },
            bases=(models.Model, core.async_utils.AsyncModelMixin),
        ),
        migrations.CreateModel(
            name='CanvasRubricRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('long_description', models.TextField(blank=True, null=True)),
                ('points', models.FloatField(default=0.0)),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='lms.canvasrubriccriterion')),
            ],
            options={
                'unique_together': {('criterion', 'canvas_id')},
            },
        ),
        migrations.CreateModel(
            name='CanvasSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('canvas_id', models.PositiveIntegerField(unique=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('grade', models.CharField(blank=True, max_length=50, null=True)),
                ('score', models.FloatField(blank=True, null=True)),
                ('workflow_state', models.CharField(choices=[('submitted', 'Submitted'), ('graded', 'Graded'), ('pending_review', 'Pending Review'), ('unsubmitted', 'Unsubmitted')], default='unsubmitted', max_length=20)),
                ('late', models.BooleanField(default=False)),
                ('excused', models.BooleanField(default=False)),
                ('missing', models.BooleanField(default=False)),
                ('submission_type', models.CharField(blank=True, max_length=50, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='lms.canvasassignment')),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='lms.canvasenrollment')),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('assignment', 'enrollment')},
            },
        ),
    ]
