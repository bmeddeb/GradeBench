# Generated by Django 5.2 on 2025-05-01 01:44

from django.db import migrations


def link_canvas_models_to_students(apps, schema_editor):
    """
    Link existing CanvasEnrollment and RubricAssessment records to new Student records
    based on the email address.
    """
    CanvasEnrollment = apps.get_model('lms', 'CanvasEnrollment')
    RubricAssessment = apps.get_model('lms', 'RubricAssessment')
    Student = apps.get_model('core', 'Student')
    
    # Handle CanvasEnrollment
    for enrollment in CanvasEnrollment.objects.all():
        if enrollment.student_profile:
            try:
                # Get the email from the user profile
                email = enrollment.student_profile.user_profile.user.email
                
                # Find the corresponding Student record
                student = Student.objects.filter(email=email).first()
                
                if student:
                    # Link the enrollment to the new Student record
                    enrollment.student = student
                    enrollment.save()
                    print(f"Linked Canvas enrollment for course {enrollment.course.name} to student {student.first_name} {student.last_name}")
                else:
                    print(f"Could not find Student record for Canvas enrollment with email {email}")
            except Exception as e:
                print(f"Error linking Canvas enrollment: {e}")
    
    # Handle RubricAssessment
    for assessment in RubricAssessment.objects.all():
        if assessment.student_profile:
            try:
                # Get the email from the user profile
                email = assessment.student_profile.user_profile.user.email
                
                # Find the corresponding Student record
                student = Student.objects.filter(email=email).first()
                
                if student:
                    # Link the assessment to the new Student record
                    assessment.student = student
                    assessment.save()
                    print(f"Linked rubric assessment {assessment.id} to student {student.first_name} {student.last_name}")
                else:
                    print(f"Could not find Student record for rubric assessment with email {email}")
            except Exception as e:
                print(f"Error linking rubric assessment: {e}")


def reverse_migration(apps, schema_editor):
    """
    Reverse migration - remove Student links and rely only on StudentProfile links
    """
    CanvasEnrollment = apps.get_model('lms', 'CanvasEnrollment')
    RubricAssessment = apps.get_model('lms', 'RubricAssessment')
    
    for enrollment in CanvasEnrollment.objects.all():
        enrollment.student = None
        enrollment.save()
    
    for assessment in RubricAssessment.objects.all():
        assessment.student = None
        assessment.save()


class Migration(migrations.Migration):

    dependencies = [
        ('lms', '0002_alter_canvasenrollment_unique_together_and_more'),
    ]

    operations = [
        migrations.RunPython(
            link_canvas_models_to_students,
            reverse_migration
        ),
    ]
