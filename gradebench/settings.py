"""
Django settings for gradebench project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environ
env = environ.Env()
# Explicitly provide path to .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = env('ALLOWED_HOSTS', default='').split(',')


# Application definition

INSTALLED_APPS = [
    # Third-party apps
    'jazzmin',  # Must be before django.contrib.admin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'social_django',

    # Project apps - domain-based structure
    'core',
    'git_providers',
    'project_mgmt',
    'lms',
    'integrations',
]

# Jazzmin settings
JAZZMIN_SETTINGS = {
    # Use CDN for jQuery and Bootstrap instead of local static files
    "use_jquery_cdn": True,
    "jquery_cdn": "https://code.jquery.com/jquery-3.7.1.min.js",
    "use_bootstrap_cdn": True,
    "bootstrap_cdn": "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css",
    
    # Title and branding
    "site_title": "GradeBench Admin",
    "site_header": "GradeBench Administration",
    "site_brand": "GradeBench",
    
    # Custom icons for side menu apps/models
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "git_providers.github": "fab fa-github",
        "lms.canvas": "fas fa-graduation-cap",
        "project_mgmt.taiga": "fas fa-tasks",
        "core": "fas fa-cogs",
    },
    
    # Order apps and models on the side menu
    "order_with_respect_to": [
        "auth",
        "git_providers",
        "lms",
        "project_mgmt",
        "social_django",
        "core",
    ],
    
    # Custom links to put in the side menu
    "custom_links": {
        "auth": [{
            "name": "User Profiles",
            "url": "admin:core_userprofile_changelist",
            "icon": "fas fa-id-card"
        }],
    },
    
    # Hide models from the side menu
    "hide_models": [
        # Social Django models
        "social_django.Association",
        "social_django.Nonce",
        "social_django.UserSocialAuth",
        "social_django.Code",
        "social_django.Partial",
        
        # Integrations models - Grade Link and Provider Association
        "integrations.GradeLink",
        "integrations.ProviderAssociation",
    ],
    
    # UI Customizations
    "show_ui_builder": True,
    "changeform_format": "horizontal_tabs",
    "related_modal_active": True,
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'core.middleware.SocialAuthExceptionMiddleware',  # Our custom middleware
]

ROOT_URLCONF = 'gradebench.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'gradebench.wsgi.application'
ASGI_APPLICATION = 'gradebench.asgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Using databases package for async support
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Async database connection URL for use with the databases package
DATABASE_URL = env('DATABASE_URL', default='sqlite:///db.sqlite3')

# Authentication settings
AUTHENTICATION_BACKENDS = (
    'social_core.backends.github.GithubOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

# GitHub OAuth settings
SOCIAL_AUTH_GITHUB_KEY = env('GITHUB_KEY')
SOCIAL_AUTH_GITHUB_SECRET = env('GITHUB_SECRET')
SOCIAL_AUTH_GITHUB_SCOPE = ['user:email']
SOCIAL_AUTH_GITHUB_GET_ALL_EXTRA_DATA = True
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
SOCIAL_AUTH_SLUGIFY_USERNAMES = True
SOCIAL_AUTH_CLEAN_USERNAMES = True

# Skip the intermediate form for choosing username if the email already exists
SOCIAL_AUTH_PIPELINE_RESUME = True

# Custom pipeline to save GitHub data to user profile
SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. In some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    'social_core.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    'social_core.pipeline.user.get_username',

    # Associate the current details with a user account having a similar email
    # address, if any. This is critical for linking GitHub to existing accounts.
    'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',

    # Create the record that associates the social account with the user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Save GitHub data to user profile
    'core.pipeline.save_profile',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',
)

# Authentication redirects
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'login'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'home'

# Error handling for social auth
SOCIAL_AUTH_LOGIN_ERROR_URL = '/profile/'
SOCIAL_AUTH_DISCONNECT_REDIRECT_URL = '/profile/'
SOCIAL_AUTH_RAISE_EXCEPTIONS = False


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
